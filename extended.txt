/*
 * adc_portentiometer.c
 *
 * Created: 4/18/2024 11:00:13 AM
 * Author : Vick
 */ 
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#define BAUD 9600 // Define baud rate
#define MYUBRR F_CPU/16/BAUD - 1 // calculate UBRR value
#include <stdio.h>
#include <avr/interrupt.h>


void USART_init(unsigned int ubrr)
{
	//set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
	UBRR0L = (unsigned char)ubrr;
	
	//Enable receiver and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	//set frame format: 8 data, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_Transmit(uint16_t data)
{
	// Convert ADC value to ASCII string
	char buffer[20]; // Increase buffer size
	snprintf(buffer, sizeof(buffer), "%u", data);
	
	// Transmit each character of the buffer
	for (int i = 0; buffer[i] != '\0'; i++) {
		// Wait for empty transmit buffer
		while (!(UCSR0A & (1 << UDRE0)));
		// Put data into buffer, send the data
		UDR0 = buffer[i];
	}
}



void ADC_init()
{
	
	// setting the adc data registers ADCH and ADCL to be right adjusted
	//ADMUX = (0 << ADLAR);
	
	// Enabling ADC
	ADCSRA = (1 << ADEN);
	
}



int ADC_read()
{
int Ain,AinLow;
	// setting analog channel selection bits
	ADMUX = (0 << MUX0) | (0 << MUX1) | (0 << MUX2) | (0 << MUX3);
	
	// wait for conversion to complete
	while(!(ADCSRA & (1 << ADIF)));
	
	
_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}

int main(void)
{
	// setting analog channel selection bits
	ADMUX = (0 << MUX0) | (0 << MUX1) | (0 << MUX2) | (0 << MUX3);

	// Setting the voltage reference selections for ADC
	ADMUX = (0 << REFS1) | (1 << REFS0) ;
	// Pre-scaling Bits to 128
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
	// setting adts adc auto trigger bits to free running
	ADCSRB = (0 << ACME) | (0 << ADTS0) | (0 << ADTS1) | (0 << ADTS2);
	
	//Start a conversion in free running mode
	ADCSRA = (1 << ADSC);
	
	//Enable ADC interrupt to activate ADIF
	ADCSRA = (1 << ADIE);
	sei();
	//Initialize ADC
	ADC_init();
	// Initialize USART
	USART_init(MYUBRR);
	
	
	
 
    while (1) 
    {
		// Transmit ADC values
		USART_Transmit(ADC_read());
		_delay_ms(5000);
			
    }
	return 0;
}
















/*
 * adc_portentiometer.c
 *
 * Created: 4/18/2024 11:00:13 AM
 * Author : Vick
 */ 
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#define BAUD 9600 // Define baud rate
#define MYUBRR F_CPU/16/BAUD - 1 
#include <avr/interrupt.h>
#include <stdio.h>


void USART_init(unsigned int ubrr)
{
	//set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
	UBRR0L = (unsigned char)ubrr;
	
	//Enable receiver and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	//set frame format: 8 data, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void USART_Transmit(uint16_t data)
{
	// Convert ADC value to ASCII string
	char buffer[20]; // Increase buffer size
	snprintf(buffer, sizeof(buffer), "%u", data);
	
	// Transmit each character of the buffer
	for (int i = 0; buffer[i] != '\0'; i++) {
		// Wait for empty transmit buffer
		while (!(UCSR0A & (1 << UDRE0)));
		// Put data into buffer, send the data
		UDR0 = buffer[i];
	}
}



void ADC_init()
{
	
	// setting the adc data registers ADCH and ADCL to be right adjusted
	ADMUX = (0 << ADLAR);
	// Setting the voltage reference selections for ADC
	ADMUX = (0 << REFS1) | (1 << REFS0) ;
	// Enabling ADC
	ADCSRA |= (1 << ADEN);
	ADCSRA |= (1 << ADIE);
	// Prescaling Bits to 128
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
	// setting adts adc auto trigger bits to free running
	ADCSRB = (0 << ACME) | (0 << ADTS0) | (0 << ADTS1) | (0 << ADTS2);
}



int ADC_read()
{

	int Ain,AinLow;
	// setting analog channel selection bits
	ADMUX = (0 << MUX0) | (0 << MUX1) | (0 << MUX2) | (0 << MUX3);
	
	
	
	// wait for conversion to complete
	while(!(ADCSRA & (1 << ADIF)));
	
	AinLow = (int)ADCL;		/* Read lower byte*/
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
	
	
}

int main(void)
{
	// starting the conversion
	ADCSRA =  (1 << ADSC);
	
	sei();
	//Initialize ADC
	ADC_init();
	// Initialize USART
	USART_init(MYUBRR);
	
	
 
    while (1) 
    {
		// Transmit ADC values
		USART_Transmit(ADC_read());
		_delay_ms(5000);
			
    }
	return 0;
}


