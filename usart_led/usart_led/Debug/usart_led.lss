
usart_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#define BRC F_CPU/16/BAUD - 1

void USART_init(unsigned int smt)
{
	//set the baud rate
	UBRR0H = (unsigned char)(smt >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)(smt);
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// activate Rx and Tx
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  94:	08 95       	ret

00000096 <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
	//Wait for transmit buffer to be empty
	while(!(UCSR0A & (1<<UDRE0)));
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <USART_Transmit>

	UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <USART_Receive>:

unsigned char USART_Receive(void)
{
	
	//wait for data to be received
	while(!(UCSR0A & (1<<RXC0)));
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a8:	88 23       	and	r24, r24
  aa:	e4 f7       	brge	.-8      	; 0xa4 <USART_Receive>
	//return received data
	return UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  b0:	08 95       	ret

000000b2 <USART_led>:

void USART_led()
{

	
	PORTB |= (1 << PORTB1);
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	85 b9       	out	0x05, r24	; 5
	USART_Transmit('N');
  b8:	8e e4       	ldi	r24, 0x4E	; 78
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Transmit>
  be:	08 95       	ret

000000c0 <USART_led_off>:
	
}
void USART_led_off()
{
	
	PORTB &=~ (1 << PORTB1);
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	08 95       	ret

000000c8 <main>:


int main(void)
{

	DDRB |= (1 << DDB1);
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	84 b9       	out	0x04, r24	; 4
	USART_init(BRC);
  ce:	87 e6       	ldi	r24, 0x67	; 103
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
	while(1)
	{
		char received_char = USART_Receive();
  d6:	0e 94 52 00 	call	0xa4	; 0xa4 <USART_Receive>
		//USART_Transmit(received_char);
		if(received_char == 's')
  da:	83 37       	cpi	r24, 0x73	; 115
  dc:	61 f4       	brne	.+24     	; 0xf6 <main+0x2e>
		{
			USART_led();
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x2a>
  f2:	00 00       	nop
  f4:	f0 cf       	rjmp	.-32     	; 0xd6 <main+0xe>
			_delay_ms(1000);
		}
		else
		{
			USART_led_off();
  f6:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_led_off>
  fa:	ed cf       	rjmp	.-38     	; 0xd6 <main+0xe>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
